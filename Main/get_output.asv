function get_output(exp_id)
% if you want to combine two injections you have to manually combine the
% results in the next section and in this section you should  use this:
  [delete_this_annotations,levels_2_keep,selected_area,st,tv,av,...
      colorxID_rgb,parent_ID,IDs,full_name,acronym,size_dots,plot_right_only]=get_ABA_data('input');

  [descendents_seed,base_level,...
    st,tv,av,plot_right_only]=get_ABA_data('output',exp_id);

[delete_this_annotations,levels_2_keep,selected_area,st,tv,av,...
    colorxID_rgb,parent_ID,IDs,full_name,acronym,size_dots,plot_right_only]=get_ABA_data('output',exp_id);


%% OUTPUT

% download data from ABA

output=getProjectionDataFromExperiment(exp_id)
result=output{1};
% you can combine multiple experiments do as follows:

% result = getProjectionDataFromExperiment(114472145);%0.35mm^3
% result2 = getProjectionDataFromExperiment(113226232);%0.55mm^3

%normalize per injection volume
% 
% inj_vol_1=0.35;
% inj_vol_2=0.55;
% ratio=1/(inj_vol_1/inj_vol_2);
% norm_projection_density=[result{1,1}.projection_density]*ratio;
% norm_projection_density=[norm_projection_density result2{1,1}.projection_density];
%  result {1} = [result{1} ,result2{1}];

%%

result([result.is_injection]==1)=[];
result([result.projection_density]==0)=[]; 


% norm_projection_density when more than one exp
if exist ('norm_projection_density','var')
    
    result.strenght_connection=norm_projection_density*size_dots;
    
else
    
% temp=([result.projection_density])*size_dots;
%     temp=([result.normalized_projection_volume])*size_dots;
%     temp=([result.projection_intensity])*size_dots;
   
        
        % https://alleninstitute.github.io/AllenSDK/unionizes.html
        
 %sum of detected projection pixels / sum of all pixels in voxel

end

result= brain_areas_cleaner(result,st,descendents_seed);


%%

plot_3d_brain_with_connectivity(result,descendents_seed,av,st,plot_right_only)


%% histogram

BRIO_hist(result,0);


%% consolidate data in main regions

result_processed=result;
% depth level 8, bring everything to that level

for qqq=1:numel(result)
    
    temp=getAllenStructureList('ancestorsOf' ,result(qqq).structure_id);
    
    
    
    
    
    % reassign structure_id
    
    
     %DELETE imprecise annotations 
     
 
         if result_processed(qqq).depth<2
              result_processed(qqq).structure_id=nan;
         end
         
          
             % if the structure derive from : Cerebrum>>>> DELETE imprecise
     % annotations (I´ll do the same for each category)
     
    if any(temp.id==567)
        
         if result_processed(qqq).depth<4
              result_processed(qqq).structure_id=nan;
         end
         
    end
    
    
    
    %bring all to level 6
    if result(qqq).depth>6
        
        result_processed(qqq).structure_id=temp.id(temp.depth==6);
    end
    
    
     % if the structure derive from : Isocortex or hippocampal formation>>>> DELETE imprecise
     % annotations (I´ll do the same for each category)
     
    if any(temp.id==315|temp.id==1089)
        
         if result_processed(qqq).depth<6
              result_processed(qqq).structure_id=nan;
         end
         
    end
    
    
    
    
    % if the structure derive from either: Hindbrain, Interbrain, Cerebral
    % Nuclei, Cortical subplate>>>> bring to level 4
    
    if any(temp.id==1065|temp.id==1129|temp.id==623|temp.id==703)
        
        result_processed(qqq).structure_id=temp.id(temp.depth==4);
        
         if result_processed(qqq).depth<4
              result_processed(qqq).structure_id=nan;
         end
      
    end
    
    % if the structure derive from : Olfactory areas>>>> bring to
    % level 5
    if any(temp.id==698)
        
        result_processed(qqq).structure_id=temp.id(temp.depth==5);
        
            if result_processed(qqq).depth<5
              result_processed(qqq).structure_id=nan;
         end
    end
    
      % if the structure derive from : Midbrain>>>> bring to
    % level 3
    if any(temp.id==313)
        
        result_processed(qqq).structure_id=temp.id(temp.depth==3);
        
          if result_processed(qqq).depth<3
              result_processed(qqq).structure_id=nan;
         end
        
    end
    
      % if the structure derive from : Cerebellum>>>> bring to
    % level 2
    if any(temp.id==512)
        
        result_processed(qqq).structure_id=temp.id(temp.depth==2);
        
        if result_processed(qqq).depth<2
              result_processed(qqq).structure_id=nan;
         end
    end
    
    % if the structure derive from either: fiber tracts, ventricular system, grooves or retina
    %>>>> bring to level 1
    
    if any(temp.id==1009|temp.id==73|temp.id==1024|temp.id==304325711)
        
        result_processed(qqq).structure_id=temp.id(temp.depth==0);
        
    end
    
    % assign NaN if annotation is imprecise
    if isempty( result_processed(qqq).structure_id)==1
        result_processed(qqq).structure_id=nan;
    end
    
    
    if mod(qqq,10)==0
        fprintf('*')
    end
    
    if mod(qqq,100)==0
        fprintf('\n')
    end
end

% if the structure derive from either: fiber tracts, ventricular system, grooves or retina
%>>>> DELETE

result_processed([result_processed.structure_id]==997)=[];

% if the structure annotation is inprecise
%>>>> DELETE

%nan are converted to zeros!!!but we don´t care, no structure has id==0
result_processed([result_processed.structure_id]==0)=[];
      
   
%average projection density for points in the same structure

for qqq=1:numel(result_processed)
    
    if sum([result_processed.structure_id]==result_processed(qqq).structure_id)>1
        
        result_processed(qqq).projection_energy=mean([result_processed([result_processed.structure_id]...
          ==result_processed(qqq).structure_id).projection_energy]);
        
    end
    
    if mod(qqq,10)==0
        fprintf('*')
    end
    if mod(qqq,100)==0
        fprintf('\n')
    end
end

%delete doubles

[~,I ] = unique([result_processed.structure_id]);
result_processed=result_processed(I);

for qqq=1:numel(result_processed)
    
   result_processed(qqq).name=st.safe_name(st.id==  result_processed(qqq).structure_id);    
  
end




%% histogram

BRIO_hist(result_processed,1);


%% pie


BRIO_pie(result_processed);


